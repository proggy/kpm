#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""Reconstruct the target function, using different methods.

To do:
--> implement FCT algorithms
--> implement pure Python versions of all algorithms
--> implement FFT algorithms
--> implement DFT algorithms"""
__created__ = '2012-08-06'
__modified__ = '2012-10-09'
import cython, numpy
cimport libc.math, numpy, openmp
from cython.parallel import *
import misc




def select(string):
  """select(string)

  Select one of the reconstruction methods defined in this module by a
  given string. For example, this could be an option string from a command
  line option."""
  __created__ = '2012-08-20'
  # based on tb.kpm2.kern.select (2012-08-14)
  string = str(string)
  if string and ('std'.startswith(string) \
                 or 'standard'.startswith(string) \
                 or 'default'.startswith(string)):
    return std
  elif string and ('dct'.startswith(string) \
                   or 'discrete cosine transformation'.startswith(string) \
                   or 'cosine transformation'.startswith(string)):
    return dct
  #elif string and ('fct'.startswith(string) \
                   #or 'fast cosine transformation'.startswith(string)):
    #return fct
  #elif string and ('dft'.startswith(string) \
                   #or 'discrete fourier transformation'.startswith(string) \
                   #or 'fourier transformation'.startswith(string)):
    #return dct
  #elif string and ('fft'.startswith(string) \
                   #or 'fast fourier transformation'.startswith(string)):
    #return fft
  else:
    raise ValueError, 'reconstruction method not found: %s' % string

def all():
  """all()

  Return a list of all reconstruction methods defined in this module."""
  __created__ = '2012-08-20'
  # based on tb.kpm2.kern.all (2012-08-18)
  funclist = [std, dct] #fct, dft, fft
  funclist.sort()
  return funclist






#================================#
# Standard reconstruction method #
#================================#


def std(moments, disc=None, omp=True, num_threads=None, out=None): #limits=None (list of limits)
  """std(moments, disc=None, omp=True, num_threads=None, out=None)

  Reconstruct target function using the "naive" Chebychev series
  expansion.

  This function only delegates the work to the corresponding low-level
  functions, all beginning with "_std_". If no optimal low-level function is
  found for the given datatype, the plain Python implementation "_std"
  is used.

  If "omp" is True, use available OpenMP-parallelized variants of the
  algorithms. If "num_threads" is not None, set the number of threads
  accordingly. If "num_threads" is smaller than 1, determine and use the
  number of processor cores."""
  __created__ = '2012-08-18'
  __modified__ = '2012-08-20'
  # based on tb.kpm2.kern.jackson (2012-08-14)
  if type(moments) is not numpy.ndarray:
    moments = numpy.ascontiguousarray(moments)
  if disc is not None and type(disc) is not numpy.ndarray:
    disc = numpy.ascontiguousarray(disc)
  if omp:
    misc.set_num_threads(num_threads)
  if moments.dtype is numpy.dtype(float):
    func = _std_real_omp if omp else _std_real
  elif moments.dtype is numpy.dtype(complex):
    func = _std_complex_omp if omp else _std_complex
  else:
    func = _std
  return func(moments, disc, out=out)




def _std(numpy.ndarray[double, mode='c'] moments,
         numpy.ndarray[double, mode='c'] disc,
         numpy.ndarray[double, mode='c'] out=None):
  """_std(numpy.ndarray[double, mode='c'] moments,
       numpy.ndarray[double, mode='c'] disc,
       numpy.ndarray[double, mode='c'] out=None)

  Reconstruct target function using the given discretization "disc". If out
  is None, return the results, otherwise save them to the given array.

  This is the pure Python version of this function, using only plain
  numpy-ndarray operations. The advantage is that it is independent of the
  given datatype."""
  __created__ = '2012-08-20'
  # based on tb.kpm2.rcstr._dct_real (2012-08-18)

  # prepare
  if not moments.flags['C_CONTIGUOUS']:
    moments = numpy.ascontiguousarray(moments)
  do_return = out is None
  if not disc.flags['C_CONTIGUOUS']:
    disc = numpy.ascontiguousarray(disc)
  if out is None:
    out = numpy.empty(len(disc), dtype=float)
  if not out.flags['C_CONTIGUOUS']:
    out = numpy.ascontiguousarray(out)
  if disc.ndim != 1:
    raise ValueError, 'bad discretization, expecting 1D array'
  if out.shape[0] != disc.shape[0] or out.ndim != 1:
    raise ValueError, 'bad output array: wrong shape'

  # calculate
  raise NotImplementedError
  limit = len(moments)
  j = numpy.arange(limit)
  out[0] = moments[0]
  #out[1:] = 2*moments   *   numpy.cos(j   *    numpy.acos(disc))[None, :]
  out /= numpy.pi*numpy.sqrt(1-disc**2)

  # return
  return out if do_return else None

@cython.cdivision(True)
@cython.boundscheck(False)
def _std_real(numpy.ndarray[double, mode='c'] moments,
              numpy.ndarray[double, mode='c'] disc,
              numpy.ndarray[double, mode='c'] out=None):
  """_std_real(numpy.ndarray[double, mode='c'] moments,
            numpy.ndarray[double, mode='c'] disc,
            numpy.ndarray[double, mode='c'] out=None)

  Reconstruct target function using the given discretization "disc". If out
  is None, return the results, otherwise save them to the given array."""
  __created__ = '2012-08-20'
  __modified__ = '2012-10-09'
  # based on tb.kpm2.rcstr._dct_real (2012-08-18)

  # prepare
  if not moments.flags['C_CONTIGUOUS']:
    moments = numpy.ascontiguousarray(moments)
  do_return = out is None
  if not disc.flags['C_CONTIGUOUS']:
    disc = numpy.ascontiguousarray(disc)
  if out is None:
    out = numpy.empty(len(disc), dtype=float)
  if not out.flags['C_CONTIGUOUS']:
    out = numpy.ascontiguousarray(out)
  if disc.ndim != 1:
    raise ValueError, 'bad discretization, expecting 1D array'
  if out.shape[0] != disc.shape[0] or out.ndim != 1:
    raise ValueError, 'bad output array: wrong shape'

  # calculate
  cdef:
    double *mom = <double*>moments.data
    double *dis = <double*>disc.data
    double *o   = <double*>out.data
    int limit = len(moments)
    int i, j
    int ndisc = len(disc)
  for i in range(ndisc):
    o[i] = mom[0]
    for j in range(1, limit):
      o[i] += mom[j]*libc.math.cos(j*libc.math.acos(dis[i]))*2
    o[i] /= libc.math.M_PI*libc.math.sqrt(1-dis[i]*dis[i])

  # return
  return <object>out if do_return else None

@cython.cdivision(True)
@cython.boundscheck(False)
def _std_real_omp(numpy.ndarray[double, mode='c'] moments,
                  numpy.ndarray[double, mode='c'] disc,
                  numpy.ndarray[double, mode='c'] out=None):
  """_std_real_omp(numpy.ndarray[double, mode='c'] moments,
                numpy.ndarray[double, mode='c'] disc,
                numpy.ndarray[double, mode='c'] out=None)

  Reconstruct target function using the given discretization "disc". If out
  is None, return the results, otherwise save them to the given array.

  This is the OpenMP version of the function, using a parallel for-loop."""
  __created__ = '2012-08-20'
  __modified__ = '2012-10-09'
  # based on tb.kpm2.rcstr._dct_real (2012-08-18)

  # prepare
  if not moments.flags['C_CONTIGUOUS']:
    moments = numpy.ascontiguousarray(moments)
  do_return = out is None
  if not disc.flags['C_CONTIGUOUS']:
    disc = numpy.ascontiguousarray(disc)
  if out is None:
    out = numpy.empty(len(disc), dtype=float)
  if not out.flags['C_CONTIGUOUS']:
    out = numpy.ascontiguousarray(out)
  if disc.ndim != 1:
    raise ValueError, 'bad discretization, expecting 1D array'
  if out.shape[0] != disc.shape[0] or out.ndim != 1:
    raise ValueError, 'bad output array: wrong shape'

  # calculate
  cdef:
    double *mom = <double*>moments.data
    double *dis = <double*>disc.data
    double *o   = <double*>out.data
    int limit = len(moments)
    int i, j
    int ndisc = len(disc)
  for i in prange(ndisc, nogil=True):
    o[i] = mom[0]
    for j in range(1, limit):
      o[i] += mom[j]*libc.math.cos(j*libc.math.acos(dis[i]))*2
    o[i] /= libc.math.M_PI*libc.math.sqrt(1-dis[i]*dis[i])

  # return
  return <object>out if do_return else None

@cython.cdivision(True)
@cython.boundscheck(False)
def _std_complex(numpy.ndarray[complex, mode='c'] moments,
                 numpy.ndarray[double,  mode='c'] disc,
                 numpy.ndarray[complex, mode='c'] out=None):
  """_std_complex(numpy.ndarray[complex, mode='c'] moments,
               numpy.ndarray[double,  mode='c'] disc,
               numpy.ndarray[complex, mode='c'] out=None)

  Reconstruct target function using the given discretization "disc". If out
  is None, return the results, otherwise save them to the given array.

  This function accepts complex moments "moments", so also the result "out" is
  generally complex."""
  __created__ = '2012-08-20'
  __modified__ = '2012-10-09'
  # based on tb.kpm2.rcstr._dct_real (2012-08-18)

  # prepare
  if not moments.flags['C_CONTIGUOUS']:
    moments = numpy.ascontiguousarray(moments)
  do_return = out is None
  if not disc.flags['C_CONTIGUOUS']:
    disc = numpy.ascontiguousarray(disc)
  if out is None:
    out = numpy.empty(len(disc), dtype=complex)
  if not out.flags['C_CONTIGUOUS']:
    out = numpy.ascontiguousarray(out)
  if disc.ndim != 1:
    raise ValueError, 'bad discretization, expecting 1D array'
  if out.shape[0] != disc.shape[0] or out.ndim != 1:
    raise ValueError, 'bad output array: wrong shape'

  # calculate
  cdef:
    complex *mom = <complex*>moments.data
    double  *dis = <double*>disc.data
    complex *o   = <complex*>out.data
    int limit = len(moments)
    int i, j
    int ndisc = len(disc)
  for i in range(ndisc):
    o[i] = mom[0]
    for j in range(1, limit):
      o[i] += mom[j]*libc.math.cos(j*libc.math.acos(dis[i]))*2
    o[i] /= libc.math.M_PI*libc.math.sqrt(1-dis[i]*dis[i])

  # return
  return <object>out if do_return else None

@cython.cdivision(True)
@cython.boundscheck(False)
def _std_complex_omp(numpy.ndarray[complex, mode='c'] moments,
                     numpy.ndarray[double,  mode='c'] disc,
                     numpy.ndarray[complex, mode='c'] out=None):
  """_std_complex_omp(numpy.ndarray[complex, mode='c'] moments,
                   numpy.ndarray[double,  mode='c'] disc,
                   numpy.ndarray[complex, mode='c'] out=None)

  Reconstruct target function using the given discretization "disc". If out
  is None, return the results, otherwise save them to the given array.

  This function accepts complex moments "moments", so also the result "out" is
  generally complex.

  This is the OpenMP version of the function, using a parallel for-loop."""
  __created__ = '2012-08-20'
  __modified__ = '2012-10-09'
  # based on tb.kpm2.rcstr._dct_real (2012-08-18)

  # prepare
  if not moments.flags['C_CONTIGUOUS']:
    moments = numpy.ascontiguousarray(moments)
  do_return = out is None
  if not disc.flags['C_CONTIGUOUS']:
    disc = numpy.ascontiguousarray(disc)
  if out is None:
    out = numpy.empty(len(disc), dtype=complex)
  if not out.flags['C_CONTIGUOUS']:
    out = numpy.ascontiguousarray(out)
  if disc.ndim != 1:
    raise ValueError, 'bad discretization, expecting 1D array'
  if out.shape[0] != disc.shape[0] or out.ndim != 1:
    raise ValueError, 'bad output array: wrong shape'

  # calculate
  cdef:
    complex *mom = <complex*>moments.data
    double  *dis = <double*>disc.data
    complex *o   = <complex*>out.data
    int limit = len(moments)
    int i, j
    int ndisc = len(disc)
  for i in prange(ndisc, nogil=True):
    o[i] = mom[0]
    for j in range(1, limit):
      o[i] += mom[j]*libc.math.cos(j*libc.math.acos(dis[i]))*2
    o[i] /= libc.math.M_PI*libc.math.sqrt(1-dis[i]*dis[i])

  # return
  return <object>out if do_return else None






#===========================#
# Discrete cosine transform #
#===========================#


def dct(moments, ndisc=None, omp=True, num_threads=None, out=None):
  """dct(moments, ndisc=None, omp=True, num_threads=None, out=None)

  Reconstruct target function using discrete cosine transformation. Use
  the function "disc.cosine(ndisc)" from the "disc" submodule with the same
  number of discretization steps "ndisc" like here to get the corresponding
  x-axis discretization, otherwise, the returned target function values are
  not valid.

  This function only delegates the work to the corresponding low-level
  functions, all beginning with "_std_". If no optimal low-level function is
  found for the given datatype, the plain Python implementation "_std"
  is used.

  If "omp" is True, use available OpenMP-parallelized variants of the
  algorithms. If "num_threads" is not None, set the number of threads
  accordingly. If "num_threads" is smaller than 1, determine and use the
  number of processor cores."""
  __created__ = '2012-08-20'
  __modified__ = '2012-08-20'
  # based on tb.kpm2.kern.jackson (2012-08-14)
  if type(moments) is not numpy.ndarray:
    moments = numpy.ascontiguousarray(moments)
  if omp:
    misc.set_num_threads(num_threads)
  if moments.dtype is numpy.dtype(float):
    func = _dct_real_omp if omp else _dct_real
  elif moments.dtype is numpy.dtype(complex):
    func = _dct_complex_omp if omp else _dct_complex
  else:
    func = _dct
  if ndisc is None:
    ndisc = 0
  return func(moments, ndisc=ndisc, out=out)

def _dct(moments, ndisc=0, out=None):
  __created__ = '2012-08-20'
  raise NotImplementedError

@cython.cdivision(True)
@cython.boundscheck(False)
def _dct_real(numpy.ndarray[double, mode='c'] moments,
              int                             ndisc=0,
              numpy.ndarray[double, mode='c'] out=None):
  """_dct_real(numpy.ndarray[double, mode='c'] moments,
            int                             ndisc=0,
            numpy.ndarray[double, mode='c'] out=None)

  Use discrete cosine transform to reconstruct target function. Use "ndisc"
  discretization steps. If "ndisc" is smaller than 1, set ndisc=2*limit, where
  limit is the number of moments (truncation limit). If out is None, return
  the results, otherwise save them to the given array."""
  __created__ = '2012-08-18'
  __modified__ = '2012-10-09'
  # based on tb.kpm.core.ldos, developed from 2011-12-06 until 2012-02-21

  # prepare
  if not moments.flags['C_CONTIGUOUS']:
    moments = numpy.ascontiguousarray(moments)
  do_return = out is None
  if ndisc < 1:
    if do_return:
      ndisc = 2*len(moments)
    else:
      ndisc = len(out)
  if out is None:
    out = numpy.empty(ndisc, dtype=float)
  if not out.flags['C_CONTIGUOUS']:
    out = numpy.ascontiguousarray(out)
  if out.shape[0] != ndisc or out.ndim != 1:
    raise ValueError, 'bad output array: wrong shape'

  # calculate
  cdef:
    double *mom = <double*>moments.data
    double *o   = <double*>out.data
    double disc, arg
    int limit = len(moments)
    int i, j
  for i in range(ndisc):
    arg = libc.math.M_PI*(2*i+1)/2/ndisc
    o[i] = mom[0]
    for j in range(1, limit):
      o[i] += 2*mom[j]*libc.math.cos(j*arg)
    disc = libc.math.cos(arg)
    o[i] /= libc.math.M_PI*libc.math.sqrt(1-disc*disc)

  # return
  return <object>out if do_return else None

@cython.cdivision(True)
@cython.boundscheck(False)
def _dct_real_omp(numpy.ndarray[double, mode='c'] moments,
                  int                             ndisc=0,
                  numpy.ndarray[double, mode='c'] out=None):
  """_dct_real_omp(numpy.ndarray[double, mode='c'] moments,
                int                             ndisc=0,
                numpy.ndarray[double, mode='c'] out=None)

  Use discrete cosine transform to reconstruct target function. Use "ndisc"
  discretization steps. If "ndisc" is smaller than 1, set ndisc=2*limit, where
  limit is the number of moments (truncation limit). If out is None, return
  the results, otherwise save them to the given array.

  This is the OpenMP version of the function, using a parallel for-loop."""
  __created__ = '2012-08-18'
  __modified__ = '2012-10-09'
  # based on tb.kpm.core.ldos, developed from 2011-12-06 until 2012-02-21

  # prepare
  if not moments.flags['C_CONTIGUOUS']:
    moments = numpy.ascontiguousarray(moments)
  do_return = out is None
  if ndisc < 1:
    if do_return:
      ndisc = 2*len(moments)
    else:
      ndisc = len(out)
  if out is None:
    out = numpy.empty(ndisc, dtype=float)
  if not out.flags['C_CONTIGUOUS']:
    out = numpy.ascontiguousarray(out)
  if out.shape[0] != ndisc or out.ndim != 1:
    raise ValueError, 'bad output array: wrong shape'

  # calculate
  cdef:
    double *mom = <double*>moments.data
    double *o   = <double*>out.data
    double disc
    int limit = len(moments)
    int i, j
  for i in prange(ndisc, nogil=True):
    o[i] = mom[0]
    for j in range(1, limit):
      o[i] += mom[j]*libc.math.cos(j*libc.math.M_PI*(2*i+1)/2/ndisc)*2
    disc = libc.math.cos(libc.math.M_PI*(2*i+1)/2/ndisc)
    o[i] /= libc.math.M_PI*libc.math.sqrt(1-disc*disc)

  # return
  return <object>out if do_return else None

@cython.cdivision(True)
@cython.boundscheck(False)
def _dct_complex(numpy.ndarray[complex, mode='c'] moments,
                 int                              ndisc=0,
                 numpy.ndarray[complex, mode='c'] out=None):
  """_dct_complex(numpy.ndarray[complex, mode='c'] moments,
               int                              ndisc=0,
               numpy.ndarray[complex, mode='c'] out=None)

  Use discrete cosine transform to reconstruct target function. Use "ndisc"
  discretization steps. If "ndisc" is smaller than 1, set ndisc=2*limit, where
  limit is the number of moments (truncation limit). If out is None, return
  the results, otherwise save them to the given array.

  This function accepts complex Chebychev moments."""
  __created__ = '2012-08-18'
  __modified__ = '2012-10-09'
  # based on tb.kpm.core.ldos, developed from 2011-12-06 until 2012-02-21

  # prepare
  if not moments.flags['C_CONTIGUOUS']:
    moments = numpy.ascontiguousarray(moments)
  do_return = out is None
  if ndisc < 1:
    if do_return:
      ndisc = 2*len(moments)
    else:
      ndisc = len(out)
  if out is None:
    out = numpy.empty(ndisc, dtype=complex)
  if not out.flags['C_CONTIGUOUS']:
    out = numpy.ascontiguousarray(out)
  if out.shape[0] != ndisc or out.ndim != 1:
    raise ValueError, 'bad output array: wrong shape'

  # calculate
  cdef:
    complex *mom = <complex*>moments.data
    complex *o   = <complex*>out.data
    double disc
    int limit = len(moments)
    int i, j
  for i in range(ndisc):
    o[i] = mom[0]
    for j in range(1, limit):
      o[i] += mom[j]*libc.math.cos(j*libc.math.M_PI*(2*i+1)/2/ndisc)*2
    disc = libc.math.cos(libc.math.M_PI*(2*i+1)/2/ndisc)
    o[i] /= libc.math.M_PI*libc.math.sqrt(1-disc*disc)

  # return
  return <object>out if do_return else None

@cython.cdivision(True)
@cython.boundscheck(False)
def _dct_complex_omp(numpy.ndarray[complex, mode='c'] moments,
                     int                              ndisc=0,
                     numpy.ndarray[complex, mode='c'] out=None):
  """_dct_complex_omp(numpy.ndarray[complex, mode='c'] moments,
                   int                              ndisc=0,
                   numpy.ndarray[complex, mode='c'] out=None)

  Use discrete cosine transform to reconstruct target function. Use "ndisc"
  discretization steps. If "ndisc" is smaller than 1, set ndisc=2*limit, where
  limit is the number of moments (truncation limit). If out is None, return
  the results, otherwise save them to the given array.

  This function accepts complex Chebychev moments.

  This is the OpenMP version of the function, using a parallel for-loop."""
  __created__ = '2012-08-18'
  __modified__ = '2012-10-09'
  # based on tb.kpm.core.ldos, developed from 2011-12-06 until 2012-02-21

  # prepare
  if not moments.flags['C_CONTIGUOUS']:
    moments = numpy.ascontiguousarray(moments)
  do_return = out is None
  if ndisc < 1:
    if do_return:
      ndisc = 2*len(moments)
    else:
      ndisc = len(out)
  if out is None:
    out = numpy.empty(ndisc, dtype=complex)
  if not out.flags['C_CONTIGUOUS']:
    out = numpy.ascontiguousarray(out)
  if out.shape[0] != ndisc or out.ndim != 1:
    raise ValueError, 'bad output array: wrong shape'

  # calculate
  cdef:
    complex *mom = <complex*>moments.data
    complex *o   = <complex*>out.data
    double disc
    int limit = len(moments)
    int i, j
  for i in prange(ndisc, nogil=True):
    o[i] = mom[0]
    for j in range(1, limit):
      o[i] += mom[j]*libc.math.cos(j*libc.math.M_PI*(2*i+1)/2/ndisc)*2
    disc = libc.math.cos(libc.math.M_PI*(2*i+1)/2/ndisc)
    o[i] /= libc.math.M_PI*libc.math.sqrt(1-disc*disc)

  # return
  return <object>out if do_return else None







#=======================#
# Fast cosine transform #
#=======================#


def _fct(moments, ndisc=None, out=None):
  """Use discrete cosine transform to reconstruct target function. Use "ndisc"
  discretization steps. If "ndisc" is None, set ndisc=2*limit, where limit is
  the number of moments (truncation limit). If out is None, return the
  results, otherwise save them to the given array.

  This function uses scipy.fftpack.dct."""
  __created__ = '2012-08-18'
  __modified__ = '2012-08-20'
  raise NotImplementedError






#============================#
# Discrete fourier transform #
#============================#


def dft(moments):
  """Reconstruct target function using discrete fourier transform."""
  __created__ = '2012-08-18'
  raise NotImplementedError

#def _dft
#def _dft_real
#def _dft_real_omp
#def _dft_complex
#def _dft_complex_omp






#========================#
# Fast fourier transform #
#========================#


def fft(moments):
  """Reconstruct target function using fast fourier transform algorithm."""
  __created__ = '2012-08-18'
  raise NotImplementedError

#def _fft
#def _fft_real
#def _fft_real_omp
#def _fft_complex
#def _fft_complex_omp
