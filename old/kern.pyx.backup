#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""Define kernels. Introduce several functions that apply kernel damping
factors on some given Chebychev moments.

To do:
--> Implement Dirichlet kernel.
--> Implement Lorentz kernel.
--> write a "select" function, selecting an appropiate kernel/function by a
    given (option-) string"""
__created__ = '2012-08-06'
__modified__ = '2012-08-13'
import cython, numpy
cimport libc.math, numpy, openmp
from cython.parallel import *
import misc



def jackson(moments, limit=None, omp=False, num_threads=None):
  """Apply the Jackson kernel to the given moments. If limit is not None, use
  the given truncation limit, otherwise use the length of the given moments
  array as truncation limit.

  This function only delegates the work to the corresponding low-level
  functions, defaulting to the standard Python implementation "_jackson". If
  the input data has certain supported data types, special Cython
  implementations are used. If "omp" is True, switch to the corresponding
  OpenMP-parallelized version of the algorithm. If "num_threads" is not None,
  set the number of threads accordingly. If "num_threads" is smaller than 1,
  determine and use the number of processor cores automatically."""
  __created__ = '2012-08-14'
  if numpy.dtype(moments) is float:
    if omp:
      misc.set_num_threads(num_threads)
      jackson_real_omp( ### USE NUMPY ARRAYS FOR COMMUNICATION
    else:
      jackson_real
  elif numpy.dtype(moments) is complex:
    if omp:
      misc.set_num_threads(num_threads)
      jackson_complex_omp
    else:
      jackson_complex
  else:
    return _jackson(moments, limit=limit)

def _jackson(moments, limit=None):
  """Apply the Jackson kernel to the given moments. If limit is not None, use
  the given truncation limit. If limit is None, use the length of the given
  moments array as truncation limit.

  This is the Python version of the function, accepting and returning normal
  Python objects. For fast Cython implementations using plain C arrays,
  consider the functions "jackson_real", "jackson_real_omp",
  "jackson_complex", and "jackson_complex_omp", depending on the needed data
  type and OpenMP parallelization features."""
  __created__ = '2012-08-08'
  # former tb.kpm.core.jackson from 2011-12-08 until 2012-04-12
  if limit is None:
    limit = len(moments)
  n = numpy.arange(len(moments))
  return numpy.array(moments)*((limit+1-n) \
                               *numpy.cos(numpy.pi*n/(limit+1)) \
                               +numpy.sin(numpy.pi*n/(limit+1)) \
                               /numpy.tan(numpy.pi/(limit+1)))/(limit+1)

@cython.cdivision(True)
cdef inline void jackson_real(double *moments,
                              int    limit,
                              double *out):
  """jackson_real(double *moments, int limit, double *out)

  Apply the Jackson kernel to the given moments using the given truncation
  limit (which must be equal to the length of the given moments array). Store
  the results in the given output array "out"."""
  # 2012-08-06 until 2012-08-13
  # former tb.kpm.core.jackson from 2011-12-08 until 2012-04-12
  cdef int i
  for i in range(limit):
    out[i] = moments[i]*((limit+1-i) \
                         *libc.math.cos(libc.math.M_PI*i/(limit+1)) \
                         +libc.math.sin(libc.math.M_PI*i/(limit+1)) \
                         /libc.math.tan(libc.math.M_PI/(limit+1)))/(limit+1)

@cython.cdivision(True)
cdef inline void jackson_real_omp(double *moments,
                                  int   limit,
                                  double *out):
  """jackson_real_omp(double *moments, int limit, double *out)

  Apply the Jackson kernel to the given moments using the given truncation
  limit (which must be equal to the length of the given moments array). Store
  the results in the given output array "out".

  This is the OpenMP version, using a parallel for-loop."""
  # 2012-08-06 until 2012-08-13
  # former tb.kpm.core.jackson from 2011-12-08 until 2012-04-12
  cdef int i
  for i in prange(limit, nogil=True):
    out[i] = moments[i]*((limit+1-i) \
                         *libc.math.cos(libc.math.M_PI*i/(limit+1)) \
                         +libc.math.sin(libc.math.M_PI*i/(limit+1)) \
                         /libc.math.tan(libc.math.M_PI/(limit+1)))/(limit+1)

@cython.cdivision(True)
cdef inline void jackson_complex(complex *moments,
                                 int     limit,
                                 complex *out):
  """jackson_complex(double complex *moments, int limit, double complex *out)

  Apply the Jackson kernel to the given moments using the given truncation
  limit (which must be equal to the length of the given moments array). Store
  the results in the given output array "out".

  This version of the function uses a complex datatype for the moments
  arrays."""
  # 2012-08-06 until 2012-08-13
  # former tb.kpm.core.jackson from 2011-12-08 until 2012-04-12
  cdef int i
  for i in range(limit):
    out[i] = moments[i]*((limit+1-i) \
                         *libc.math.cos(libc.math.M_PI*i/(limit+1)) \
                         +libc.math.sin(libc.math.M_PI*i/(limit+1)) \
                         /libc.math.tan(libc.math.M_PI/(limit+1)))/(limit+1)

@cython.cdivision(True)
cdef inline void jackson_complex_omp(complex *moments,
                                     int     limit,
                                     complex *out):
  """jackson_complex(double complex *moments, int limit, double complex *out)

  Apply the Jackson kernel to the given moments using the given truncation
  limit (which must be equal to the length of the given moments array). Store
  the results in the given output array "out".

  This version of the function uses a complex datatype for the moments
  arrays. Furthermore, this is the OpenMP version, using a parallel
  for-loop."""
  # 2012-08-08 until 2012-08-13
  # former tb.kpm.core.jackson from 2011-12-08 until 2012-04-12
  cdef int i
  for i in prange(limit, nogil=True):
    out[i] = moments[i]*((limit+1-i) \
                         *libc.math.cos(libc.math.M_PI*i/(limit+1)) \
                         +libc.math.sin(libc.math.M_PI*i/(limit+1)) \
                         /libc.math.tan(libc.math.M_PI/(limit+1)))/(limit+1)



                         
                         
#def dirichlet

#def lorentz
